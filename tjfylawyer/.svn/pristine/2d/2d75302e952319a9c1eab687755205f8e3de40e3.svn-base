package software.bbs.data.dao.impl;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Query;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import software.bbs.data.dao.BaseDao;
import software.bbs.data.dataobject.Postb;

public abstract class BaseDaoImpl<T> extends HibernateDaoSupport implements BaseDao<T> {
	
	Class<T> clazz;
	
	public BaseDaoImpl(){
		ParameterizedType pt =  (ParameterizedType)this.getClass().getGenericSuperclass();//BaseDaoImpl<User>
		clazz = (Class<T>)pt.getActualTypeArguments()[0];
	}
	public void save(T entity) {
		try{
			getHibernateTemplate().save(entity);
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public void update(T entity) {
		getHibernateTemplate().update(entity);
	}

	public void delete(Serializable id) {
		getHibernateTemplate().delete(findObjectById(id));
	}

	public T findObjectById(Serializable id) {
		return getHibernateTemplate().get(clazz, id);
	}

	public List<T> findObjects() {
		
		Query query  = getSession().createQuery("FROM " + clazz.getSimpleName());
		List<T> list=null;
		/*List list=new ArrayList<Postb>();
		Postb p=new Postb();
		p.setPostId(1);
		list.add(p);*/
		try {
			list=query.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		System.out.println(list);
		return list;
	}


}
